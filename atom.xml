<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://forethought.top/"/>
  <updated>2019-05-01T04:10:30.710Z</updated>
  <id>http://forethought.top/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>about</title>
    <link href="http://forethought.top/2019/05/01/about/"/>
    <id>http://forethought.top/2019/05/01/about/</id>
    <published>2019-05-01T04:10:30.000Z</published>
    <updated>2019-05-01T04:10:30.710Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://forethought.top/2019/05/01/hello-world/"/>
    <id>http://forethought.top/2019/05/01/hello-world/</id>
    <published>2019-05-01T02:07:59.060Z</published>
    <updated>2019-05-01T02:07:59.060Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>打印全排列</title>
    <link href="http://forethought.top/2019/02/02/%E6%89%93%E5%8D%B0%E5%85%A8%E6%8E%92%E5%88%97/"/>
    <id>http://forethought.top/2019/02/02/打印全排列/</id>
    <published>2019-02-02T03:14:45.000Z</published>
    <updated>2019-02-02T03:19:00.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目-给定几个不重复数字-请输出全排列"><a href="#题目-给定几个不重复数字-请输出全排列" class="headerlink" title="题目:给定几个不重复数字,请输出全排列"></a>题目:给定几个不重复数字,请输出全排列</h2><p>示例:1,2,3<br>输出:1,2,3<br>        1,3,2<br>        2,1,3<br>        2,3,1<br>        3,2,1<br>        3,1,2<br>思考:给定的字符是1,2,3,…n<br>全排列会允许任一字符能到达任一位置<br>比如:1,2,3<br>如果固定 1为第一个字符,则需要对 2,3 进行全排列<br>如果固定 2为第一个字符,则需要对 1,3 进行全排列(为什么不是3,1被?这里是将1与2位置交换,方便思考,以免混乱)<br>如果固定 3位第一个字符,则需要对 2,1 进行全排列</p><p>也就是说:<br>给定k=0,k及其之后任意元素交换到位置k,此时输出都是一个全排列<br>k不断增加,直到k=数组长度,则表示已经尝试了所有的全排列<br>似乎就可以使用递归了,固定某一段位置,对剩下部分求全排列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  wangwei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>     2019/1/25 20:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@classDescription</span>  打印n个数的全排列:每个元素都可以放到位置k, k 初始化为0,k之后的元素都可以交换到位置k,</span></span><br><span class="line"><span class="comment"> *                                                每个元素都可以放到k+1,</span></span><br><span class="line"><span class="comment"> *                                                知道k位于最后一个位置,表示已经处理完,可以输出</span></span><br><span class="line"><span class="comment"> *    比如输入 3</span></span><br><span class="line"><span class="comment"> *    输出:1,2,3</span></span><br><span class="line"><span class="comment"> *         1,3,2</span></span><br><span class="line"><span class="comment"> *         2,1,3</span></span><br><span class="line"><span class="comment"> *         2,3,1</span></span><br><span class="line"><span class="comment"> *         3,2,1</span></span><br><span class="line"><span class="comment"> *         3,1,2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FullPermutation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> array[],<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==array.length-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">                System.out.print(array[i]+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;array.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">            ArrayUtil.swap(array,k,i);</span><br><span class="line">            print(array,k+<span class="number">1</span>);</span><br><span class="line">            ArrayUtil.swap(array,k,i);</span><br><span class="line">         </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] array=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        print(array,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 思考:如果有重复元素,那么怎么输出所有的全排列呢?</span></span><br><span class="line"><span class="comment">    *           需要记录与当前k交换的元素值,如果同一种元素交换到k位置过,那么就不再交换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果:输入 1,2,3<br>输出:</p><p><img src="https://img-blog.csdnimg.cn/20190125214536659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTIyOTI3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="变式-给定几个数字-可能重复-请输出全排列"><a href="#变式-给定几个数字-可能重复-请输出全排列" class="headerlink" title="变式:给定几个数字(可能重复),请输出全排列"></a>变式:给定几个数字(可能重复),请输出全排列</h2><p>示例:1,2^,2<br>输出:1,2^,2   (姑且认为2是不一样的)  这里是1与1交换<br>        1,2,2^ (重复)      —–   2^与2交换<br>         2,2^,1                 - —-   1与2交换<br>         2,1,2^                —–    2^与1交换<br>         2^,1,2(重复)           —–   1与2^ 交换<br>         2^,2,1(重复)        —— 1与2交换<br>    <strong>重复元素怎么处理呢??</strong><br>    标记已经交换过的元素,如果交换过,则不再交换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> array[],<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(k==array.length-<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">              System.out.print(array[i]+<span class="string">" "</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">    <span class="keyword">boolean</span>[] record=<span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">1024</span>];<span class="comment">//记录交换的数据</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;array.length;i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(record[array[i]])&#123;</span><br><span class="line">             <span class="keyword">continue</span>;<span class="comment">//有交换记录,跳过此次交换</span></span><br><span class="line">         &#125;</span><br><span class="line">          ArrayUtil.swap(array,k,i);</span><br><span class="line">          print(array,k+<span class="number">1</span>);</span><br><span class="line">          ArrayUtil.swap(array,k,i);</span><br><span class="line">         record[array[i]]=<span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>测试效果:<br>1,2,2<br>输出:<br><img src="https://img-blog.csdnimg.cn/20190125214630805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTIyOTI3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目-给定几个不重复数字-请输出全排列&quot;&gt;&lt;a href=&quot;#题目-给定几个不重复数字-请输出全排列&quot; class=&quot;headerlink&quot; title=&quot;题目:给定几个不重复数字,请输出全排列&quot;&gt;&lt;/a&gt;题目:给定几个不重复数字,请输出全排列&lt;/h2&gt;&lt;p&gt;示例
      
    
    </summary>
    
    
      <category term="算法" scheme="http://forethought.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[原]使用栈寻找迷宫通路</title>
    <link href="http://forethought.top/2019/01/28/%E5%8E%9F-%E4%BD%BF%E7%94%A8%E6%A0%88%E5%AF%BB%E6%89%BE%E8%BF%B7%E5%AE%AB%E9%80%9A%E8%B7%AF/"/>
    <id>http://forethought.top/2019/01/28/原-使用栈寻找迷宫通路/</id>
    <published>2019-01-28T03:24:10.000Z</published>
    <updated>2019-02-02T06:58:12.211Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述:<br>给定一个n*n的迷宫矩阵,障碍物记为1,无障碍记为0</p><p>int[][] map = new int[][]{<br>{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},<br>{1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},<br>{1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1},<br>{1, 1, 1, 0, 0, 1, 1, 1, …                    <div><br>                        作者：qq_36922927 发表于 2019/01/28 11:24:10 <a href="https://blog.csdn.net/qq_36922927/article/details/86672963" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/86672963" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/86672963</a>                    </div><br>                    <div><br>                        阅读：24                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题描述:&lt;br&gt;给定一个n*n的迷宫矩阵,障碍物记为1,无障碍记为0&lt;/p&gt;
&lt;p&gt;int[][] map = new int[][]{&lt;br&gt;{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},&lt;br&gt;{1, 0, 0, 1, 1, 1, 1, 1
      
    
    </summary>
    
      <category term="算法" scheme="http://forethought.top/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://forethought.top/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://forethought.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="栈" scheme="http://forethought.top/tags/%E6%A0%88/"/>
    
      <category term="递归" scheme="http://forethought.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>[原]字符串匹配算法kmp</title>
    <link href="http://forethought.top/2019/01/26/%E5%8E%9F-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95kmp/"/>
    <id>http://forethought.top/2019/01/26/原-字符串匹配算法kmp/</id>
    <published>2019-01-26T13:33:49.000Z</published>
    <updated>2019-02-02T07:01:36.667Z</updated>
    
    <content type="html"><![CDATA[<p>问题:给定原串origin,求target 串在原串第一次出现的位置,若不存在,输出-1<br>例如: origin:abcdef<br>target:bc<br>输出:1<br>朴素算法<br>最直观的思路(朴素算法):</p><p>取target的首元素与origin的首元素比较,如果相同,执行2<br>两个字符相同,继续比较两个串的下一个元素<br>如果出现元素不同<br>3.1 如果上一个元素是匹配的(也就是当前比较的不是target串的首字符)…                    <div><br>                        作者：qq_36922927 发表于 2019/01/26 21:33:49 <a href="https://blog.csdn.net/qq_36922927/article/details/86661194" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/86661194" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/86661194</a>                    </div><br>                    <div><br>                        阅读：37                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题:给定原串origin,求target 串在原串第一次出现的位置,若不存在,输出-1&lt;br&gt;例如: origin:abcdef&lt;br&gt;target:bc&lt;br&gt;输出:1&lt;br&gt;朴素算法&lt;br&gt;最直观的思路(朴素算法):&lt;/p&gt;
&lt;p&gt;取target的首元素与origin
      
    
    </summary>
    
      <category term="算法" scheme="http://forethought.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://forethought.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="kmp" scheme="http://forethought.top/tags/kmp/"/>
    
      <category term="字符串匹配" scheme="http://forethought.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>[原]我的2018-2019</title>
    <link href="http://forethought.top/2019/01/26/%E5%8E%9F-%E6%88%91%E7%9A%842018-2019/"/>
    <id>http://forethought.top/2019/01/26/原-我的2018-2019/</id>
    <published>2019-01-26T11:43:49.000Z</published>
    <updated>2019-02-02T06:23:54.082Z</updated>
    
    <content type="html"><![CDATA[<p>习惯性的<br>习惯性的，每当一个新的阶段或者是有些感想时，一般是在时间剩余不多的的时候。<br>习惯性的，也常常会在这个时候立下一大堆今天决定的，第二天就倒塌的体无完肤的flag。<br>习惯性的，但是这里不能再是习惯性的。转眼，就得步入社会，面临残酷的社会竞争，离开隔离社会的最后一堵墙。<br>欠清晰的认识自己<br>经常觉得自己学到一些东西，感觉比人了不起，比别人强。但事实上，那常常是伪装，缺乏自信的伪装而已。很多时候，…                    <div><br>                        作者：qq_36922927 发表于 2019/01/26 19:43:49 <a href="https://blog.csdn.net/qq_36922927/article/details/86660314" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/86660314" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/86660314</a>                    </div><br>                    <div><br>                        阅读：77                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;习惯性的&lt;br&gt;习惯性的，每当一个新的阶段或者是有些感想时，一般是在时间剩余不多的的时候。&lt;br&gt;习惯性的，也常常会在这个时候立下一大堆今天决定的，第二天就倒塌的体无完肤的flag。&lt;br&gt;习惯性的，但是这里不能再是习惯性的。转眼，就得步入社会，面临残酷的社会竞争，离开隔离
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[原]java 中的各种奇怪的执行顺序之对象篇</title>
    <link href="http://forethought.top/2019/01/25/%E5%8E%9F-java-%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E5%A5%87%E6%80%AA%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E4%B9%8B%E5%AF%B9%E8%B1%A1%E7%AF%87/"/>
    <id>http://forethought.top/2019/01/25/原-java-中的各种奇怪的执行顺序之对象篇/</id>
    <published>2019-01-25T14:40:43.000Z</published>
    <updated>2019-02-02T06:54:16.884Z</updated>
    
    <content type="html"><![CDATA[<p>面试题中常常遇见子类继承父类,new一个子类对象,请写出执行顺序,着实恶心.<br>写个小小demo,来理解一下.</p><p>public class Parent {<br>    public int publicPro;<br>    private int privatePro;<br>    protected int protectedPro;<br>    static {<br>        System.out.prin…                    <div><br>                        作者：qq_36922927 发表于 2019/01/25 22:40:43 <a href="https://blog.csdn.net/qq_36922927/article/details/86652577" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/86652577" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/86652577</a>                    </div><br>                    <div><br>                        阅读：11                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面试题中常常遇见子类继承父类,new一个子类对象,请写出执行顺序,着实恶心.&lt;br&gt;写个小小demo,来理解一下.&lt;/p&gt;
&lt;p&gt;public class Parent {&lt;br&gt;    public int publicPro;&lt;br&gt;    private int pr
      
    
    </summary>
    
      <category term="java基础" scheme="http://forethought.top/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java基础" scheme="http://forethought.top/tags/java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="jdk" scheme="http://forethought.top/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>[原]全排列的打印</title>
    <link href="http://forethought.top/2019/01/25/%E5%8E%9F-%E5%85%A8%E6%8E%92%E5%88%97%E7%9A%84%E6%89%93%E5%8D%B0/"/>
    <id>http://forethought.top/2019/01/25/原-全排列的打印/</id>
    <published>2019-01-25T13:47:53.000Z</published>
    <updated>2019-02-02T06:57:49.133Z</updated>
    
    <content type="html"><![CDATA[<p>题目:给定几个不重复数字,请输出全排列<br>示例:1,2,3<br>输出:1,2,3<br>1,3,2<br>2,1,3<br>2,3,1<br>3,2,1<br>3,1,2<br>思考:给定的字符是1,2,3,…n<br>全排列会允许任一字符能到达任一位置<br>比如:1,2,3<br>如果固定 1为第一个字符,则需要对 2,3 进行全排列<br>如果固定 2为第一个字符,则需要对 1,3 进行全排列(为什么不是3,1被?这里是将1与2位置交换,方便思考,以免混乱…                    <div><br>                        作者：qq_36922927 发表于 2019/01/25 21:47:53 <a href="https://blog.csdn.net/qq_36922927/article/details/86652314" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/86652314" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/86652314</a>                    </div><br>                    <div><br>                        阅读：21                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目:给定几个不重复数字,请输出全排列&lt;br&gt;示例:1,2,3&lt;br&gt;输出:1,2,3&lt;br&gt;1,3,2&lt;br&gt;2,1,3&lt;br&gt;2,3,1&lt;br&gt;3,2,1&lt;br&gt;3,1,2&lt;br&gt;思考:给定的字符是1,2,3,…n&lt;br&gt;全排列会允许任一字符能到达任一位置&lt;br&gt;比如:
      
    
    </summary>
    
      <category term="算法" scheme="http://forethought.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="递归" scheme="http://forethought.top/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="算法" scheme="http://forethought.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[原](一)设计模式之策略模式</title>
    <link href="http://forethought.top/2019/01/24/%E5%8E%9F-%E4%B8%80-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://forethought.top/2019/01/24/原-一-设计模式之策略模式/</id>
    <published>2019-01-24T04:09:20.000Z</published>
    <updated>2019-02-02T07:01:40.540Z</updated>
    
    <content type="html"><![CDATA[<p>注:以jdk中的一角来理解设计模式的运用<br>策略模式:<br>在不同的情形下选取不同的方式去处理<br>比如:jdk中的  java.util.Arrays.sort() 方法,则是根据待排序数组的初始的有序程度,以及规模来选取不同的排序方式处理排序<br>具体实现是这个方法:<br>策略1:对于小数组,直接使用&amp;amp;quot;快排&amp;amp;quot;<br>策略2:对于不是高度结构化(各区间内有序)的数组,执行&amp;amp;quot;快排&amp;amp;quot;<br>策略3:高度结构化的,使用归并排                    <div><br>                        作者：qq_36922927 发表于 2019/01/24 12:09:20 <a href="https://blog.csdn.net/qq_36922927/article/details/86622952" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/86622952" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/86622952</a>                    </div><br>                    <div><br>                        阅读：19                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;注:以jdk中的一角来理解设计模式的运用&lt;br&gt;策略模式:&lt;br&gt;在不同的情形下选取不同的方式去处理&lt;br&gt;比如:jdk中的  java.util.Arrays.sort() 方法,则是根据待排序数组的初始的有序程度,以及规模来选取不同的排序方式处理排序&lt;br&gt;具体实现是这
      
    
    </summary>
    
      <category term="设计模式" scheme="http://forethought.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://forethought.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="http://forethought.top/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>[转]git常用操作</title>
    <link href="http://forethought.top/2019/01/20/%E8%BD%AC-git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://forethought.top/2019/01/20/转-git常用操作/</id>
    <published>2019-01-20T08:44:17.000Z</published>
    <updated>2019-02-02T07:05:31.547Z</updated>
    
    <content type="html"><![CDATA[<p>转载自博客:此博客<br>主要是如何新建仓库,创建分支,切换分支,合并分支,删除分支<br>demo:<br>新建仓库:<br>git init 可以将当前文件夹初始化为本地git仓库<br>git 仓库默认有一个master分支<br>但一般更改代码是在新起一个分支,比如叫做develop<br>提交本地仓库到远程仓库</p><p>git remote add origin <a href="https://github.com/XXX(username)/YYY.." target="_blank" rel="noopener">https://github.com/XXX(username)/YYY..</a>.                    <div><br>                        作者：qq_36922927 发表于 2019/01/20 16:44:17 <a href="https://blog.csdn.net/qq_36922927/article/details/86563285" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/86563285" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/86563285</a>                    </div><br>                    <div><br>                        阅读：15                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载自博客:此博客&lt;br&gt;主要是如何新建仓库,创建分支,切换分支,合并分支,删除分支&lt;br&gt;demo:&lt;br&gt;新建仓库:&lt;br&gt;git init 可以将当前文件夹初始化为本地git仓库&lt;br&gt;git 仓库默认有一个master分支&lt;br&gt;但一般更改代码是在新起一个分支,比如
      
    
    </summary>
    
      <category term="版本控制" scheme="http://forethought.top/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="git" scheme="http://forethought.top/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git/"/>
    
    
      <category term="git" scheme="http://forethought.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>[原]unity3d 官方demo入门概念</title>
    <link href="http://forethought.top/2019/01/20/%E5%8E%9F-unity3d-%E5%AE%98%E6%96%B9demo%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/"/>
    <id>http://forethought.top/2019/01/20/原-unity3d-官方demo入门概念/</id>
    <published>2019-01-20T05:27:52.000Z</published>
    <updated>2019-05-01T03:26:27.923Z</updated>
    
    <content type="html"><![CDATA[<p>unity3d 基本操作<br>基本概念<br>gameObjects:游戏中一切出现的都是objects<br>component: gameObjects 本身是没有各种行为的,是通过给object添加component让其具有移动等等行为或者是属性<br>transform:移动,理解为物体移动,给相关objects设置一些属性参数,比如x,y,z  改变其空间位置.   x(左),y(上),z 垂直屏幕向里<br>几个…                    <div><br>                        作者：qq_36922927 发表于 2019/01/20 13:27:52 <a href="https://blog.csdn.net/qq_36922927/article/details/85915608" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/85915608" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/85915608</a>                    </div><br>                    <div><br>                        阅读：15                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;unity3d 基本操作&lt;br&gt;基本概念&lt;br&gt;gameObjects:游戏中一切出现的都是objects&lt;br&gt;component: gameObjects 本身是没有各种行为的,是通过给object添加component让其具有移动等等行为或者是属性&lt;br&gt;transf
      
    
    </summary>
    
      <category term="游戏开发" scheme="http://forethought.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="unity3d" scheme="http://forethought.top/tags/unity3d/"/>
    
      <category term="游戏开发" scheme="http://forethought.top/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>[原]数据结构之查找</title>
    <link href="http://forethought.top/2019/01/15/%E5%8E%9F-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%9F%A5%E6%89%BE/"/>
    <id>http://forethought.top/2019/01/15/原-数据结构之查找/</id>
    <published>2019-01-15T08:03:45.000Z</published>
    <updated>2019-02-02T06:58:50.995Z</updated>
    
    <content type="html"><![CDATA[<p>常见查找算法<br>顺序查找<br>二分查找<br>索引查找<br>hash查找<br>关键字:可能重复<br>次关键字:唯一<br>查找表:<br>顺序查找:<br>空间复杂度:o(1)<br>时间复杂度:<br>最好:o(1)<br>最坏:o(n)<br>平均:o(n)<br>如果已知概率,可将大概率数据放在靠前,以减少平均查找长度<br>折半查找:<br>有序表:顺序表中的记录按照关键字值有序<br>时间复杂度:log(n)<br>以深度为h的满二叉树为例,即<br>n=2h−1<br> n=2^h-1<br>n=…                    <div><br>                        作者：qq_36922927 发表于 2019/01/15 16:03:45 <a href="https://blog.csdn.net/qq_36922927/article/details/85942990" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/85942990" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/85942990</a>                    </div><br>                    <div><br>                        阅读：27                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常见查找算法&lt;br&gt;顺序查找&lt;br&gt;二分查找&lt;br&gt;索引查找&lt;br&gt;hash查找&lt;br&gt;关键字:可能重复&lt;br&gt;次关键字:唯一&lt;br&gt;查找表:&lt;br&gt;顺序查找:&lt;br&gt;空间复杂度:o(1)&lt;br&gt;时间复杂度:&lt;br&gt;最好:o(1)&lt;br&gt;最坏:o(n)&lt;br&gt;平均:o(n)
      
    
    </summary>
    
      <category term="数据结构" scheme="http://forethought.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://forethought.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="查找" scheme="http://forethought.top/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>[原]hibernate select操作出现字段被截断错误</title>
    <link href="http://forethought.top/2019/01/02/%E5%8E%9F-hibernate-select%E6%93%8D%E4%BD%9C%E5%87%BA%E7%8E%B0%E5%AD%97%E6%AE%B5%E8%A2%AB%E6%88%AA%E6%96%AD%E9%94%99%E8%AF%AF/"/>
    <id>http://forethought.top/2019/01/02/原-hibernate-select操作出现字段被截断错误/</id>
    <published>2019-01-02T12:03:59.000Z</published>
    <updated>2019-02-02T06:51:29.837Z</updated>
    
    <content type="html"><![CDATA[<p>hibernate 使用面向对象的思想,<br>将数据表抽象为类,<br>数据记录抽象为对象,<br>比较完美的减少了对sql的显式使用,用起来也是比较方便,通过操作对象就能增删改数据库记录.<br>优点:</p><p>单表查询简单,<br>crud完美移植到方法的调用,<br>对开发人员sql的要求比较低<br>缺点:<br>多表查询比较麻烦,<br>映射比较繁琐<br>字段完全查出,性能有消耗<br>这些优缺点只是个人理解.</p><p>接下来才是本文重点:<br>主角登场–遇到的问…                    <div><br>                        作者：qq_36922927 发表于 2019/01/02 20:03:59 <a href="https://blog.csdn.net/qq_36922927/article/details/85549273" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/85549273" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/85549273</a>                    </div><br>                    <div><br>                        阅读：47                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hibernate 使用面向对象的思想,&lt;br&gt;将数据表抽象为类,&lt;br&gt;数据记录抽象为对象,&lt;br&gt;比较完美的减少了对sql的显式使用,用起来也是比较方便,通过操作对象就能增删改数据库记录.&lt;br&gt;优点:&lt;/p&gt;
&lt;p&gt;单表查询简单,&lt;br&gt;crud完美移植到方法的调用,
      
    
    </summary>
    
      <category term="hibernate" scheme="http://forethought.top/categories/hibernate/"/>
    
    
      <category term="hibernate" scheme="http://forethought.top/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>[原](六) 折腾的asp.net 发布</title>
    <link href="http://forethought.top/2018/12/31/%E5%8E%9F-%E5%85%AD-%E6%8A%98%E8%85%BE%E7%9A%84asp-net-%E5%8F%91%E5%B8%83/"/>
    <id>http://forethought.top/2018/12/31/原-六-折腾的asp-net-发布/</id>
    <published>2018-12-31T12:49:01.000Z</published>
    <updated>2019-02-02T06:57:10.164Z</updated>
    
    <content type="html"><![CDATA[<p>1,iis需要配置:<br>开启windows功能,所有关于.net ,asp的<br>windows 默认是没有安装iis的,但是可以通过开启windows功能,使用iis<br>2,虚拟目录权限需要配置<br>配置为 Authenticated Users  ,NETWORK SERVICE<br>3,Web.config  连接字符串需要修改<br>比如开发时本地是这样的:<br>  &amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;add name=&amp;amp;amp;amp;amp;amp                    <div><br>                        作者：qq_36922927 发表于 2018/12/31 20:49:01 <a href="https://blog.csdn.net/qq_36922927/article/details/85456777" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/85456777" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/85456777</a>                    </div><br>                    <div><br>                        阅读：22                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1,iis需要配置:&lt;br&gt;开启windows功能,所有关于.net ,asp的&lt;br&gt;windows 默认是没有安装iis的,但是可以通过开启windows功能,使用iis&lt;br&gt;2,虚拟目录权限需要配置&lt;br&gt;配置为 Authenticated Users  ,NETW
      
    
    </summary>
    
      <category term="ASP.net" scheme="http://forethought.top/categories/ASP-net/"/>
    
    
      <category term=".net" scheme="http://forethought.top/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>[原](四).net ajax异步刷新</title>
    <link href="http://forethought.top/2018/12/30/%E5%8E%9F-%E5%9B%9B-net-ajax%E5%BC%82%E6%AD%A5%E5%88%B7%E6%96%B0/"/>
    <id>http://forethought.top/2018/12/30/原-四-net-ajax异步刷新/</id>
    <published>2018-12-30T02:42:58.000Z</published>
    <updated>2019-02-02T06:59:29.114Z</updated>
    
    <content type="html"><![CDATA[<p>ajax=Asynchronous Javascript And XmlHttpRequest(XHR)<br>ajax是对通用标准的封装。<br>AJAX关键技术：</p><p>1，使用XHTML(HTML)和css构建标准的显示层<br>2，使用DOM（document object model）进行动态显示和交互<br>3，使用XML和XLST进行数据交换和操纵<br>4，使用XMLHttpRequest异步获取数据<br>5，使用ja…                    <div><br>                        作者：qq_36922927 发表于 2018/12/30 10:42:58 <a href="https://blog.csdn.net/qq_36922927/article/details/84982284" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/84982284" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/84982284</a>                    </div><br>                    <div><br>                        阅读：30                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ajax=Asynchronous Javascript And XmlHttpRequest(XHR)&lt;br&gt;ajax是对通用标准的封装。&lt;br&gt;AJAX关键技术：&lt;/p&gt;
&lt;p&gt;1，使用XHTML(HTML)和css构建标准的显示层&lt;br&gt;2，使用DOM（documen
      
    
    </summary>
    
      <category term="ASP.net" scheme="http://forethought.top/categories/ASP-net/"/>
    
    
      <category term=".net" scheme="http://forethought.top/tags/net/"/>
    
      <category term="ajax" scheme="http://forethought.top/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>[原]卸载小乌龟报错 invalid,提示&amp;quot; 无法使用此安装源&amp;quot;</title>
    <link href="http://forethought.top/2018/12/27/%E5%8E%9F-%E5%8D%B8%E8%BD%BD%E5%B0%8F%E4%B9%8C%E9%BE%9F%E6%8A%A5%E9%94%99-invalid-%E6%8F%90%E7%A4%BA-quot-%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E6%AD%A4%E5%AE%89%E8%A3%85%E6%BA%90-quot/"/>
    <id>http://forethought.top/2018/12/27/原-卸载小乌龟报错-invalid-提示-quot-无法使用此安装源-quot/</id>
    <published>2018-12-27T15:34:32.000Z</published>
    <updated>2019-02-02T07:00:25.059Z</updated>
    
    <content type="html"><![CDATA[<p>svn 无法卸载:<br>由于挪动了安装包位置或者是修改了安装包名字,卸载时需要选择安装程序,就会提示安装程序名invalid,提示&amp;quot; 无法使用此安装源&amp;quot;<br>更可气的是,卸载不了,也修复不了,而且代码也不能同步等操作<br>解决:将安装程序名字更改为提示所要求的名字,如果只是挪动了安装程序位置,找到该位置的安装程序即可.<br>如果安装包被删除了,去小乌龟官网下载对应版本即可</p><p>…                    <div><br>                        作者：qq_36922927 发表于 2018/12/27 23:34:32 <a href="https://blog.csdn.net/qq_36922927/article/details/85315720" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/85315720" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/85315720</a>                    </div><br>                    <div><br>                        阅读：19                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;svn 无法卸载:&lt;br&gt;由于挪动了安装包位置或者是修改了安装包名字,卸载时需要选择安装程序,就会提示安装程序名invalid,提示&amp;amp;quot; 无法使用此安装源&amp;amp;quot;&lt;br&gt;更可气的是,卸载不了,也修复不了,而且代码也不能同步等操作&lt;br&gt;解决:将安
      
    
    </summary>
    
      <category term="版本控制" scheme="http://forethought.top/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="svn" scheme="http://forethought.top/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/svn/"/>
    
    
      <category term="svn" scheme="http://forethought.top/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>[原]svn提交代码出现 no lock token available</title>
    <link href="http://forethought.top/2018/12/27/%E5%8E%9F-svn%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%87%BA%E7%8E%B0-no-lock-token-available/"/>
    <id>http://forethought.top/2018/12/27/原-svn提交代码出现-no-lock-token-available/</id>
    <published>2018-12-27T09:40:11.000Z</published>
    <updated>2019-02-02T06:55:47.211Z</updated>
    
    <content type="html"><![CDATA[<p>svn 提交报错:<br>no lock token available<br>如果是自己给锁定了,需要释放</p><p>如果是别人锁定了,让别人释放,<br>我这个就比较厉害了,自己锁定,而且还不能释放!!!<br>提交报如下错误</p><p>正确操作:<br>在svn 中浏览仓库,定位到被锁定的文件<br><strong>右键-&amp;amp;gt;break lock,</strong>然后再提交就没问题了.</p><p>…                    <div><br>                        作者：qq_36922927 发表于 2018/12/27 17:40:11 <a href="https://blog.csdn.net/qq_36922927/article/details/85294490" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/85294490" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/85294490</a>                    </div><br>                    <div><br>                        阅读：62                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;svn 提交报错:&lt;br&gt;no lock token available&lt;br&gt;如果是自己给锁定了,需要释放&lt;/p&gt;
&lt;p&gt;如果是别人锁定了,让别人释放,&lt;br&gt;我这个就比较厉害了,自己锁定,而且还不能释放!!!&lt;br&gt;提交报如下错误&lt;/p&gt;
&lt;p&gt;正确操作:&lt;br&gt;在sv
      
    
    </summary>
    
      <category term="版本控制" scheme="http://forethought.top/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="svn" scheme="http://forethought.top/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>[原]HTTP Status 500 - Could not write content</title>
    <link href="http://forethought.top/2018/12/20/%E5%8E%9F-HTTP-Status-500-Could-not-write-content/"/>
    <id>http://forethought.top/2018/12/20/原-HTTP-Status-500-Could-not-write-content/</id>
    <published>2018-12-20T00:52:19.000Z</published>
    <updated>2019-02-02T06:53:55.765Z</updated>
    
    <content type="html"><![CDATA[<p>后台查询数据向前端返回数据时报错：<br>HTTP Status 500 - Could not write content<em>**</em><br>1，原因：<br>执行对应的sql发现有一个字段查出来时是null的，<br>而封装到某个对象中时，并未给属性是否为null，检测，如果为null就赋予一个符合该属性类型的值，即可。</p><p>   if (!Objects.isNull(row[8])) {<br>            tem…                    <div><br>                        作者：qq_36922927 发表于 2018/12/20 08:52:19 <a href="https://blog.csdn.net/qq_36922927/article/details/85111328" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/85111328" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/85111328</a>                    </div><br>                    <div><br>                        阅读：50                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;后台查询数据向前端返回数据时报错：&lt;br&gt;HTTP Status 500 - Could not write content&lt;em&gt;**&lt;/em&gt;&lt;br&gt;1，原因：&lt;br&gt;执行对应的sql发现有一个字段查出来时是null的，&lt;br&gt;而封装到某个对象中时，并未给属性是否为nu
      
    
    </summary>
    
      <category term="java后端" scheme="http://forethought.top/categories/java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="500" scheme="http://forethought.top/tags/500/"/>
    
      <category term="基本数据类型包装类" scheme="http://forethought.top/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>[原]rabbitMQ的简单使用</title>
    <link href="http://forethought.top/2018/12/12/%E5%8E%9F-rabbitMQ%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://forethought.top/2018/12/12/原-rabbitMQ的简单使用/</id>
    <published>2018-12-12T13:10:51.000Z</published>
    <updated>2019-02-02T06:55:23.219Z</updated>
    
    <content type="html"><![CDATA[<p>文章目录direct模式：直来直往，指哪到哪儿配置：生产者：消费者：特点：交换机模式：交换机模式1：topic模式，配置：生产者：消费者：过程：交换机模式2Fanout模式：配置：生产者：消费者：特点：交换机模式3：Headers模式，配置：生产者：消费者：特点：总结：<br>生产者：制造消息<br>消费者：获取消息，处理消息<br>路由机制：中转消息<br>四种模式：<br>后三种是交换机模式<br>Direct：不需要交换机，直…                    <div><br>                        作者：qq_36922927 发表于 2018/12/12 21:10:51 <a href="https://blog.csdn.net/qq_36922927/article/details/84979496" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/84979496" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/84979496</a>                    </div><br>                    <div><br>                        阅读：26                     </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文章目录direct模式：直来直往，指哪到哪儿配置：生产者：消费者：特点：交换机模式：交换机模式1：topic模式，配置：生产者：消费者：过程：交换机模式2Fanout模式：配置：生产者：消费者：特点：交换机模式3：Headers模式，配置：生产者：消费者：特点：总结：&lt;b
      
    
    </summary>
    
      <category term="消息中间件" scheme="http://forethought.top/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="rabbitMQ" scheme="http://forethought.top/tags/rabbitMQ/"/>
    
      <category term="消息队列" scheme="http://forethought.top/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>[原]double check机制真的是完美的吗？</title>
    <link href="http://forethought.top/2018/12/12/%E5%8E%9F-double-check%E6%9C%BA%E5%88%B6%E7%9C%9F%E7%9A%84%E6%98%AF%E5%AE%8C%E7%BE%8E%E7%9A%84%E5%90%97%EF%BC%9F/"/>
    <id>http://forethought.top/2018/12/12/原-double-check机制真的是完美的吗？/</id>
    <published>2018-12-12T11:02:27.000Z</published>
    <updated>2019-02-02T06:45:10.228Z</updated>
    
    <content type="html"><![CDATA[<p>单例我们是经常会用到的一种设计模式，为了减少对象的创建。<br>一个类有且仅有一个实例，并且自行实例化向整个系统提供。<br>但是在多线程的情况下，我们不得不考虑如何保证正确高效的获得单例对象。<br>单例的一般写法：<br>(这里以饿汉为例）<br>public class Singleton(){<br>private static Singleton instance;<br>private Singleton(){<br>}<br>publi…                    <div><br>                        作者：qq_36922927 发表于 2018/12/12 19:02:27 <a href="https://blog.csdn.net/qq_36922927/article/details/84977365" target="_blank" rel="noopener">原文链接</a> <a href="https://blog.csdn.net/qq_36922927/article/details/84977365" target="_blank" rel="noopener">https://blog.csdn.net/qq_36922927/article/details/84977365</a>                    </div><br>                    <div><br>                        阅读：41 评论：1 <a href="https://blog.csdn.net/qq_36922927/article/details/84977365#comments" target="_blank" rel="noopener">查看评论</a>                    </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单例我们是经常会用到的一种设计模式，为了减少对象的创建。&lt;br&gt;一个类有且仅有一个实例，并且自行实例化向整个系统提供。&lt;br&gt;但是在多线程的情况下，我们不得不考虑如何保证正确高效的获得单例对象。&lt;br&gt;单例的一般写法：&lt;br&gt;(这里以饿汉为例）&lt;br&gt;public clas
      
    
    </summary>
    
      <category term="设计模式" scheme="http://forethought.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="多线程" scheme="http://forethought.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="单例" scheme="http://forethought.top/tags/%E5%8D%95%E4%BE%8B/"/>
    
      <category term="设计模式" scheme="http://forethought.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
